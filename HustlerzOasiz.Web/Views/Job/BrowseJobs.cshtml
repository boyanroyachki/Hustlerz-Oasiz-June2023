@using HustlerzOasiz.Services.Data;
@using HustlerzOasiz.Services.Data.Interfaces;
@using MarauderzOasiz.Data.Models;
@using static HustlerzOasiz.Web.Infrastructure.ClaimsPrincipalExtensions;

@model IEnumerable<Job>

@inject IContractorService ContractorService
@inject IJobService JobService
@{
    string userId = User.GetId();
    bool isUserContractor = await ContractorService.ContractorExistsByUserIdAsync(this.User.GetId());
    string contractorId = await ContractorService.GetContractorIdByUserIdAsync(userId);
}

<style>
    /* Basic Reset */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    h1 {
        color: white;
    }

    body {
        font-family: 'Roboto', sans-serif;
    }

    /* Styling for the main content */
    .job-details-content {
        color: #333; /* Dark grey for better readability */
        padding: 20px;
    }

    /* Job Card Styling */
    .job-box {
        display: flex;
        flex-direction: column;
        justify-content: space-between;

        display: block;
        background-color: #fff;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        padding: 20px;
        margin: 10px 0;
        text-decoration: none;
        color: inherit;
        transition: box-shadow 0.3s ease;
    }

    /* Button Container */
    .button-container {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        gap: 10px;
    }

    .job-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
    }


        .job-box:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    /* Form Elements Styling */
    form {
        margin-bottom: 20px;
    }

    select, button {
        padding: 10px;
        margin-right: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }

    button {
        background-color: #4caf50;
        color: #fff;
        cursor: pointer;
    }

        button:hover {
            background-color: #45a049;
        }

    /* Button Styles */
    .btn {
        display: inline-block;
        padding: 10px 20px;
        margin: 10px 2px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-details {
        background-color: #3498db;
        color: #fff;
    }

    .btn-adopt {
        background-color: #f39c12;
        color: #fff;
    }

    .btn-quit {
        background-color: #e74c3c;
        color: #fff;
    }

    .btn-edit {
        background-color: orange;
        color: #fff;
    }

    .btn:hover {
        opacity: 0.8;
    }


    /* Job Box Styling */
    .job-box {
        /* ...existing styles... */
        height: 300px; /* Adjust as needed */
    }

    .job-box {
        flex: 1 0 30%; /* This will make each box take up approximately one third of the container width. */
        margin: 1%; /* Adding some margin for better visual separation. */
    }

    /* Job Details Styling */
    .job-details {
        overflow-y: auto;
        max-height: 200px; /* Adjust as needed */
        padding-right: 10px;
    }

</style>


<div class="job-details-content">
    <h1>All Jobs</h1>

    <form method="get">
        <!-- ...existing form... -->
        <select name="categoryId">
            <option value="">All Categories</option>
            <option value="1">Ammonition</option>
            <option value="2">Protection</option>
            <option value="3">Special Missions</option>
            <option value="4">Cyber warfare or/and Cyber security</option>
            <!-- etc -->
        </select>
        <button type="submit">Filter</button>
    </form>

    <div class="job-container">
        @foreach (var job in Model)
        {
            <div class="job-box">
                <!-- Job Details with Scrolling -->
                <div class="job-details">
                    <h2>@job.Title</h2>
                    <p>@job.Location</p>
                    <p>@job.Details</p>
                    <p>@job.Price $</p>
                    <p>Date posted: @job.DatePosted</p>
                    @{
                        if (job.Deadline == null)
                        {
                            <p>No deadline</p>
                        }
                        else
                        {
                            <p>Deadline: @job.Deadline</p>
                        }
                        var contractor = ContractorService.GetContractorByContractorIdAsync(job.ContractorId.ToString());
                        var username = contractor.Username;

                        <p>Published by: @username</p>
                    }
                </div>

                <!-- Buttons -->
                <div class="button-container">
                 
                    <a href="@Url.Action("Detail", "Job", new { id = job.Id })" class="btn btn-details">Details</a>
                     
                    @if (await JobService.IsJobAdoptedByUserWithIdAsync(job.Id.ToString(), userId))
                    {
                     <a href="@Url.Action("Quit", "Job", new { id = job.Id })" class="btn btn-quit">Quit</a>
                    }

                    @if (!await JobService.IsJobAdoptedByUserWithIdAsync(job.Id.ToString(), userId))
                    {
                        @if (!await JobService.IsJobAdoptedByIdAsync(job.Id.ToString()))
                        {
                          <a href="@Url.Action("Adopt", "Job", new { id = job.Id })" class="btn btn-adopt">Adopt</a>
                        }
                    }

                   @if (await JobService.IsContractorWithIdOwnerOfJobAsync(job.Id.ToString(), contractorId))
                    {
                        <a href="@Url.Action("Edit", "Job", new { id = job.Id })" class="btn btn-edit">Edit</a>
                    }

                </div>
            </div>
        }
    </div>
</div>
